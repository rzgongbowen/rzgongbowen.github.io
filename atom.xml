<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gong bowen&#39;s blog</title>
  
  <subtitle>因为喜欢，可迎万难</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-28T09:08:54.138Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gong Bowen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>批量将目录下的文件复制到指定目录</title>
    <link href="http://yoursite.com/2020/03/28/103/"/>
    <id>http://yoursite.com/2020/03/28/103/</id>
    <published>2020-03-28T08:49:00.000Z</published>
    <updated>2020-03-28T09:08:54.138Z</updated>
    
    <content type="html"><![CDATA[<h5 id="核心就是调用shutil-copy-源码如下："><a href="#核心就是调用shutil-copy-源码如下：" class="headerlink" title="核心就是调用shutil.copy,源码如下："></a>核心就是调用shutil.copy,源码如下：</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 批量将目录下的文件复制到指定目录</span><br><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">path &#x3D; input(&quot;请输入你需要操作的目录(格式如&#39;D:\\test&#39;)：&quot;)</span><br><span class="line"></span><br><span class="line">def get_filelist(dir):</span><br><span class="line">    Filelist &#x3D; []</span><br><span class="line">    for home, dirs, files in os.walk(path):</span><br><span class="line">        for filename in files:</span><br><span class="line">             # 文件名列表，包含完整路径</span><br><span class="line">            Filelist.append(os.path.join(home, filename))</span><br><span class="line">             # 文件名列表，只包含文件名</span><br><span class="line">             # Filelist.append( filename)</span><br><span class="line">    return Filelist</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    Filelist &#x3D; get_filelist(dir)</span><br><span class="line">    print(len(Filelist))</span><br><span class="line">    for file in Filelist:</span><br><span class="line">        print(file)</span><br><span class="line">        shutil.copy(file, &#39;C:\\Users\\86178\\Desktop\\com&#39;)  # 调用shutil.copy,无重复</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;核心就是调用shutil-copy-源码如下：&quot;&gt;&lt;a href=&quot;#核心就是调用shutil-copy-源码如下：&quot; class=&quot;headerlink&quot; title=&quot;核心就是调用shutil.copy,源码如下：&quot;&gt;&lt;/a&gt;核心就是调用shutil.copy,源码如下：&lt;/h5&gt;
    
    </summary>
    
    
      <category term="Python编写的小功能" scheme="http://yoursite.com/categories/Python%E7%BC%96%E5%86%99%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="批量" scheme="http://yoursite.com/tags/%E6%89%B9%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>批量遍历目录下文件在文件头位置添加数据</title>
    <link href="http://yoursite.com/2020/03/28/102/"/>
    <id>http://yoursite.com/2020/03/28/102/</id>
    <published>2020-03-28T08:41:00.000Z</published>
    <updated>2020-03-28T09:08:40.419Z</updated>
    
    <content type="html"><![CDATA[<h5 id="接上篇《-批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“-md”文件的内容了，在其文件头位置添加："><a href="#接上篇《-批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“-md”文件的内容了，在其文件头位置添加：" class="headerlink" title="接上篇《 批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“.md”文件的内容了，在其文件头位置添加："></a>接上篇《 批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“.md”文件的内容了，在其文件头位置添加：</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: BaoZi</span><br><span class="line">author: Gong Bowen</span><br><span class="line">tags: </span><br><span class="line">   - WaitAndNotify</span><br><span class="line">categories: </span><br><span class="line">   - 初学JAVA</span><br><span class="line">date: 2020-03-28 10:35:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>title：文章标题</li><li>author：作者名</li><li>tags：标签名</li><li>categorys：分类名</li><li>date：文章发表日期</li><li>两个“—”里，添加如上的数据</li></ul><p>批量遍历目录下文件在文件头位置添加数据的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 批量遍历目录下文件在文件头位置添加数据</span><br><span class="line">import os</span><br><span class="line">import time # 导入time模块</span><br><span class="line">date &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line">path &#x3D; input(&quot;请输入你需要操作的目录(格式如&#39;D:\\test&#39;)：&quot;)</span><br><span class="line"></span><br><span class="line">def get_filelist(dir):</span><br><span class="line">    Filelist &#x3D; []</span><br><span class="line">    for home, dirs, files in os.walk(path):</span><br><span class="line">        for filename in files:</span><br><span class="line">            # 文件名列表，包含完整路径</span><br><span class="line">            Filelist.append(os.path.join(home, filename))</span><br><span class="line">            # 文件名列表，只包含文件名</span><br><span class="line">            # Filelist.append( filename)</span><br><span class="line">    return Filelist</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    Filelist &#x3D; get_filelist(dir)</span><br><span class="line">    print(len(Filelist))</span><br><span class="line">    for path in Filelist:</span><br><span class="line">        print(path)</span><br><span class="line">        dict &#x3D; &#123;&#125;</span><br><span class="line">        b &#x3D; path.split(&#39;\\&#39;)</span><br><span class="line">        dict[&#39;title&#39;] &#x3D; b[-1].split(&#39;.&#39;)[0] # 添加标题</span><br><span class="line">        dict[&#39;author&#39;] &#x3D; &quot;Gong Bowen&quot; # 添加作者</span><br><span class="line">        dict[&#39;tags&#39;] &#x3D; &quot;\n   - &quot; + b[-2] # 添加标签</span><br><span class="line">        dict[&#39;categories&#39;] &#x3D; &quot;\n   - 初学JAVA&quot; # 添加分类</span><br><span class="line">        dict[&#39;date&#39;] &#x3D; date # 添加时间</span><br><span class="line">        print(dict)</span><br><span class="line">        with open(path, &quot;r+&quot;, encoding&#x3D;&#39;UTF-8&#39;) as f:</span><br><span class="line">            old &#x3D; f.read()</span><br><span class="line">            f.seek(0)</span><br><span class="line">            f.write(&#39;---\n&#39;)</span><br><span class="line">            for key, value in dict.items():</span><br><span class="line">                f.writelines(key+&#39;: &#39;+value+&#39;\n&#39;)</span><br><span class="line">            f.write(&#39;---\n&#39;)</span><br><span class="line">            f.write(b[-2] + &#39;.&#39; + b[-1].split(&#39;.&#39;)[0] + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;&lt;!-- more --&gt;&quot; + &quot;\n&quot;)</span><br><span class="line">            f.write(old)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;接上篇《-批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“-md”文件的内容了，在其文件头位置添加：&quot;&gt;&lt;a href=&quot;#接上篇《-批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“-md”文件的内容了，在其文件头位置添加：&quot; class=&quot;headerlink&quot; title=&quot;接上篇《 批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“.md”文件的内容了，在其文件头位置添加：&quot;&gt;&lt;/a&gt;接上篇《 批量修改一个文件下的文件后缀》，修改完文件的后缀就要修改“.md”文件的内容了，在其文件头位置添加：&lt;/h5&gt;
    
    </summary>
    
    
      <category term="Python编写的小功能" scheme="http://yoursite.com/categories/Python%E7%BC%96%E5%86%99%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="批量" scheme="http://yoursite.com/tags/%E6%89%B9%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>批量修改目录下文件的后缀</title>
    <link href="http://yoursite.com/2020/03/28/101/"/>
    <id>http://yoursite.com/2020/03/28/101/</id>
    <published>2020-03-28T08:22:00.000Z</published>
    <updated>2020-03-28T09:08:24.223Z</updated>
    
    <content type="html"><![CDATA[<h5 id="分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“-java”-–-gt-“-md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“-md”文件，移动到“-source-posts”目录下，再通过Git命令即可发表-hexo-cl-hexo-g，hexo-d…"><a href="#分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“-java”-–-gt-“-md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“-md”文件，移动到“-source-posts”目录下，再通过Git命令即可发表-hexo-cl-hexo-g，hexo-d…" class="headerlink" title="分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“.java” –&gt; “.md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“.md”文件，移动到“\source_posts”目录下，再通过Git命令即可发表(hexo cl,hexo g，hexo d…)"></a>分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“.java” –&gt; “.md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“.md”文件，移动到“\source_posts”目录下，再通过Git命令即可发表(hexo cl,hexo g，hexo d…)</h5><a id="more"></a><h5 id="话不多说，本文重点如下："><a href="#话不多说，本文重点如下：" class="headerlink" title="话不多说，本文重点如下："></a>话不多说，本文重点如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 批量修改目录下文件的后缀</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">path &#x3D; input(&quot;请输入你需要操作的目录(格式如&#39;D:\\test&#39;)：&quot;)</span><br><span class="line"></span><br><span class="line">def get_filelist(dir):</span><br><span class="line">    Filelist &#x3D; []</span><br><span class="line">    for home, dirs, files in os.walk(path):</span><br><span class="line">        for filename in files:</span><br><span class="line">             # 文件名列表，包含完整路径</span><br><span class="line">            Filelist.append(os.path.join(home, filename))</span><br><span class="line">             # 文件名列表，只包含文件名</span><br><span class="line">             # Filelist.append( filename)</span><br><span class="line">    return Filelist</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    Filelist &#x3D; get_filelist(dir)</span><br><span class="line">    print(len(Filelist))</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    for file in Filelist:</span><br><span class="line">        Olddir &#x3D; file</span><br><span class="line">        print(Olddir)</span><br><span class="line">        if Olddir.split(&#39;.&#39;)[-1] &#x3D;&#x3D; &#39;java&#39;:</span><br><span class="line">            count +&#x3D; 1</span><br><span class="line">            Newdir &#x3D; Olddir.replace(&#39;.java&#39;, &#39;.md&#39;)  # 修改指定的后缀</span><br><span class="line">            os.rename(Olddir, Newdir)</span><br><span class="line">            print(Olddir, &#39;--&gt;&#39;, Newdir )</span><br><span class="line">    print(&#39;修改了&#39;,count,&#39;个&#39;)</span><br></pre></td></tr></table></figure><p>将java文件修改为Hexo文章发表的另外两个工具将在后续的文章说明…<br>本人水平有限，仅此记录下自己的修改过程，让各位大佬见笑了，有什么建议可以在评论区留言，一起进步！</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“-java”-–-gt-“-md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“-md”文件，移动到“-source-posts”目录下，再通过Git命令即可发表-hexo-cl-hexo-g，hexo-d…&quot;&gt;&lt;a href=&quot;#分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“-java”-–-gt-“-md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“-md”文件，移动到“-source-posts”目录下，再通过Git命令即可发表-hexo-cl-hexo-g，hexo-d…&quot; class=&quot;headerlink&quot; title=&quot;分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“.java” –&amp;gt; “.md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“.md”文件，移动到“\source_posts”目录下，再通过Git命令即可发表(hexo cl,hexo g，hexo d…)&quot;&gt;&lt;/a&gt;分享一个如何批量修改文件后缀名（包含该路径下的所有文件夹）的源码，用python编写的，今天突发奇想，想把之前学习练习的java源码作为Hexo的博客发表，首先自然就是修改为Markdown格式，那就是“.java” –&amp;gt; “.md”，然后再将Markdown文件添加上头数据，使得Markdown符合Hexo博客文章的格式，再将修改好的“.md”文件，移动到“\source_posts”目录下，再通过Git命令即可发表(hexo cl,hexo g，hexo d…)&lt;/h5&gt;
    
    </summary>
    
    
      <category term="Python编写的小功能" scheme="http://yoursite.com/categories/Python%E7%BC%96%E5%86%99%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="批量" scheme="http://yoursite.com/tags/%E6%89%B9%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>BaoZiPu</title>
    <link href="http://yoursite.com/2020/03/28/BaoZiPu/"/>
    <id>http://yoursite.com/2020/03/28/BaoZiPu/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.871Z</updated>
    
    <content type="html"><![CDATA[<p>WaitAndNotify.BaoZiPu</p><a id="more"></a><p>package com.ThreadAndLambda.WaitAndNotify;</p><p>/*<br>    生产者（包子铺）类：是一个线程类，可以继承Thread<br>    设置线程任务（run）：生产包子<br>    对包子的状态进行判断<br>    true：有包子<br>        包子铺调用wait方法进入等待状态<br>    false：没有包子<br>        包子铺生产包子<br>        增加趣味：交替生产两种包子<br>            两种状态（i%2 == 0）<br>        包子铺生产好了包子<br>        修改包子的状态为true有<br>        唤醒吃货线程，让吃货线程吃包子<br>    注意：<br>        包子铺线程和包子线程关系–&gt;通信（互斥）<br>        必须使用同步技术保证两个线程只能有一个在执行<br>        锁对象必须保证唯一，可以使用包子对象作为锁对象<br>        包子铺类和吃货类就需要把包子对象作为参数传递进来<br>            1.需要在成员位置创建一个包子变量<br>            2.使用带参数构造方法，为这个包子变量赋值<br> */<br>public class BaoZiPu extends Thread {<br>    // 1.需要在成员位置创建一个包子变量<br>    private BaoZi baoZi;</p><pre><code>// 2.使用带参数构造方法，为这个包子变量赋值public BaoZiPu(BaoZi baoZi) {    this.baoZi = baoZi;}// 设置线程任务（run）：生产包子@Overridepublic void run() {    // 定义一个变量    int count = 0;    while (true) {        // 必须使用同步技术保证两个线程只能有一个在执行        synchronized (baoZi) {            // 对包子的状态进行判断            if (baoZi.flag == true) {                // 包子铺调用wait方法进入等待状态                try {                    baoZi.wait();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            // 被唤醒之后执行，包子铺生产包子            // 增加趣味：交替生产两种包子 两种状态（i%2 == 0）            if (count % 2 == 0) {                baoZi.pi = &quot;薄皮&quot;;                baoZi.xian = &quot;三鲜馅&quot;;            } else {                baoZi.pi = &quot;厚皮&quot;;                baoZi.xian = &quot;牛肉大葱馅&quot;;            }            count++;            System.out.println(&quot;包子铺正在生产&quot; + baoZi.pi + baoZi.xian);            // 需要3秒做包子            try {                Thread.sleep(3000);            } catch (InterruptedException e) {                e.printStackTrace();            }            // 包子铺生产好了包子            // 修改包子的状态为true有            baoZi.flag = true;            // 唤醒吃货线程，让吃货线程吃包子            baoZi.notify();            System.out.println(&quot;包子铺已经生产完&quot; + baoZi.pi + baoZi.xian);        }    }}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WaitAndNotify.BaoZiPu&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="WaitAndNotify" scheme="http://yoursite.com/tags/WaitAndNotify/"/>
    
  </entry>
  
  <entry>
    <title>BaoZi</title>
    <link href="http://yoursite.com/2020/03/28/BaoZi/"/>
    <id>http://yoursite.com/2020/03/28/BaoZi/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.870Z</updated>
    
    <content type="html"><![CDATA[<p>WaitAndNotify.BaoZi</p><a id="more"></a><p>package com.ThreadAndLambda.WaitAndNotify;</p><p>/*<br>    资源类：包子类<br>    设置包子的属性<br>        皮<br>        馅<br>        包子的状态：有 true，没有 false<br> */<br>public class BaoZi {<br>    // 皮<br>    String pi;<br>    // 馅<br>    String xian;<br>    // 包子的状态：有 true，没有 false，设置初始值为false没有包子<br>    boolean flag = false;</p><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WaitAndNotify.BaoZi&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="WaitAndNotify" scheme="http://yoursite.com/tags/WaitAndNotify/"/>
    
  </entry>
  
  <entry>
    <title>Demo</title>
    <link href="http://yoursite.com/2020/03/28/Demo/"/>
    <id>http://yoursite.com/2020/03/28/Demo/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.873Z</updated>
    
    <content type="html"><![CDATA[<p>WaitAndNotify.Demo</p><a id="more"></a><p>package com.ThreadAndLambda.WaitAndNotify;</p><p>/*<br>    测试类：<br>    包含main方法，程序执行的入口，启动程序<br>    创建包子对象<br>    创建包子铺进程，开启，生产包子<br>    创建吃货进程，开启，吃包子<br> */<br>public class Demo {<br>    public static void main(String[] args) {<br>        // 创建包子对象<br>        BaoZi baoZi = new BaoZi();<br>        // 创建包子铺进程，开启，生产包子<br>        new BaoZiPu(baoZi).start();<br>        // 创建吃货进程，开启，吃包子<br>        new Chihuo(baoZi).start();<br>    }<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WaitAndNotify.Demo&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="WaitAndNotify" scheme="http://yoursite.com/tags/WaitAndNotify/"/>
    
  </entry>
  
  <entry>
    <title>Chihuo</title>
    <link href="http://yoursite.com/2020/03/28/Chihuo/"/>
    <id>http://yoursite.com/2020/03/28/Chihuo/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.872Z</updated>
    
    <content type="html"><![CDATA[<p>WaitAndNotify.Chihuo</p><a id="more"></a><p>package com.ThreadAndLambda.WaitAndNotify;</p><p>/*<br>    消费者（吃货）类：是一个线程类，可以继承Thread<br>    设置线程任务（run）：吃包子<br>    对包子状态进行判断<br>    false：没有包子<br>        吃货调用wait方法进入等待状态<br>    true：有包子<br>        吃货吃包子<br>        吃货吃完包子<br>        修改包子状态为false没有<br>        吃货唤醒包子铺生产包子<br> */<br>public class Chihuo extends Thread{<br>    // 1.需要在成员位置创建一个包子变量<br>    private BaoZi baoZi;</p><pre><code>// 2.使用带参数构造方法，为这个包子变量赋值public Chihuo(BaoZi baoZi) {    this.baoZi = baoZi;}// 设置线程任务（run）：吃包子@Overridepublic void run() {    while (true) {        // 必须使用同步技术保证两个线程只能有一个在执行        synchronized (baoZi) {            // 对包子状态进行判断            if (baoZi.flag == false)  {                // 吃货调用wait方法进入等待状态                try {                    baoZi.wait();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            /*吃货吃包子                    吃货吃完包子            修改包子状态为false没有                    吃货唤醒包子铺生产包子*/            // 吃货吃包子            System.out.println(&quot;正在吃包子&quot; + baoZi.pi + baoZi.xian);            //  吃货吃完包子 修改包子状态为false没有            baoZi.flag = false;            // 吃货唤醒包子铺生产包子            baoZi.notify();            System.out.println(baoZi.pi + baoZi.xian + &quot;已吃完，包子铺开始生产包子&quot;);            System.out.println(&quot;==============================================&quot;);        }    }}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WaitAndNotify.Chihuo&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="WaitAndNotify" scheme="http://yoursite.com/tags/WaitAndNotify/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Exception</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Exception/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Exception/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.792Z</updated>
    
    <content type="html"><![CDATA[<p>Exception.Demo01Exception</p><a id="more"></a><p>package com.Exception;</p><p>/*<br>    java.lang.Throwable：类是java语言中所有错误或异常的超类<br>        Exception：编译器异常，进行编译（写代码）java程序出现的异常<br>            RuntimeException：运行期异常，java程序运行过程中出现的问题<br>        Error：错误<br>            错误就相当于程序得了绝症，必须修改源代码，程序才能继续执行<br> <em>/<br>public class Demo01Exception {<br>    public static void main(String[] args) {<br>        /</em>// Exception：编译期异常，进行编译（写代码）java程序出现的问题<br>        SimpleDateFormat sdf = new SimpleDateFormat(“yyyy-MM-dd”); // 用来格式化日期<br>        try {<br>            Date date = sdf.parse(“1999-09-09”); // 把字符串格式的日期解析为Date格式的日期<br>        } catch (ParseException e) {<br>            e.printStackTrace();<br>        }<br>        System.out.println();*/</p><pre><code>    // RuntimeException：运行期异常，java程序运行过程中出现的问题    /*int[] arr = {1, 2, 3};        // System.out.println(arr[1]);    try {        // 可能会出现异常的代码        System.out.println(arr[3]);    } catch (Exception e) {        // 异常的处理逻辑        System.out.println(e);    }*/    /*        Error：错误        OutOfMemoryError: Java heap space        内存溢出的错误，创建的数组太大，超出了给JVM的内存     */    // int[] arr = new int[1024*1024*1024];    // 必须修改代码，创建的数组小一点    int[] arr = new int[1024*1024];    System.out.println(&quot;后续代码&quot;);}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exception.Demo01Exception&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Exception" scheme="http://yoursite.com/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Debug</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Debug/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Debug/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.790Z</updated>
    
    <content type="html"><![CDATA[<p>Debug.Demo01Debug</p><a id="more"></a><p>package com.Debug;</p><p>/*<br>    Debug调试程序：<br>        可以让代码逐行执行，查看代码执行的过程，调试程序中出现的bug<br>    使用方法：<br>        在行号的右边，鼠标左键单击，添加断点（每个方法的第一行，哪里有bug就添加到哪里）<br>        右键，选择Debug执行程序<br>        程序就会停留在添加的第一行断点处<br>    执行程序：<br>        F8：逐行执行程序<br>        F7：进入到方法中<br>        Shift+F8：跳出方法<br>        F9：跳到下一个断点，如果没有下一个断点，就结束程序<br>        Ctrl+F2：退出Debug模式，停止程序<br>        Console：切换到控制台<br> */<br>public class Demo01Debug {<br>    public static void main(String[] args) {<br>//        int a = 10;<br>//        int b = 20;<br>//        int sum = a + b;<br>//        System.out.println(sum);</p><pre><code>    for (int i = 0; i &lt; 3; i++) {        System.out.println(i);    }}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Debug.Demo01Debug&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Collections</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Collections/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Collections/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.780Z</updated>
    
    <content type="html"><![CDATA[<p>Collections.Demo01Collections</p><a id="more"></a><p>package com.Collections;</p><p>import java.util.ArrayList;<br>import java.util.Collections;</p><p>/*<br>    java.util.Collections是集合工具类，用来对集合进行操作。部分方法如下：<br>        public static <T> boolean addAll(Collection<T> c,t…element): 往集合中添加一些元素<br>        public static void shuffle(List&lt;?&gt; list): 打乱顺序。打乱集合顺序<br> */<br>public class Demo01Collections {<br>    public static void main(String[] args) {<br>        ArrayList<String> arrayList = new ArrayList&lt;&gt;();<br>//        public static <T> boolean addAll(Collection<T> c,t…element): 往集合中添加一些元素<br>        Collections.addAll(arrayList,”a”,”b”,”c”,”d”);</T></T></String></T></T></p><pre><code>System.out.println(arrayList); // [a, b, c, d]</code></pre><p>//        public static void shuffle(List&lt;?&gt; list): 打乱顺序。打乱集合顺序<br>        Collections.shuffle(arrayList);<br>        System.out.println(arrayList); // [c, b, a, d]</p><pre><code>}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Collections.Demo01Collections&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Collections" scheme="http://yoursite.com/tags/Collections/"/>
    
  </entry>
  
  <entry>
    <title>Demo01GetThreadName</title>
    <link href="http://yoursite.com/2020/03/28/Demo01GetThreadName/"/>
    <id>http://yoursite.com/2020/03/28/Demo01GetThreadName/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.840Z</updated>
    
    <content type="html"><![CDATA[<p>GetName.Demo01GetThreadName</p><a id="more"></a><p>package com.Thread.GetName;</p><p>/*<br>    线程名称：<br>        主线程：main<br>        新线程：Thread-0，Thread-1，Thread-2<br> */<br>public class Demo01GetThreadName {<br>    public static void main(String[] args) {<br>        // 创建Thread类的子类对象<br>        MyThread myThread = new MyThread();<br>        // 调用start方法，开启新线程。执行run方法<br>        myThread.start();</p><pre><code>    new MyThread().start();    new MyThread().start();    System.out.println(Thread.currentThread().getName());}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GetName.Demo01GetThreadName&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="GetName" scheme="http://yoursite.com/tags/GetName/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Generic</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Generic/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Generic/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.801Z</updated>
    
    <content type="html"><![CDATA[<p>Generic.Demo01Generic</p><a id="more"></a><p>package com.Generic;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;</p><p>public class Demo01Generic {<br>    public static void main(String[] args) {<br>        ArrayList<String> list = new ArrayList&lt;&gt;();<br>        list.add(“aaa”);<br>        list.add(“bbb”);<br>        list.add(“ccc”);<br>        //使用迭代器遍历it集合<br>        Iterator<String> iterator = list.iterator();<br>        while (iterator.hasNext()) {<br>            String next = iterator.next();<br>            System.out.println(next);<br>        }</String></String></p><pre><code>    for (String s:list) {        System.out.println(s);    }}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Generic.Demo01Generic&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Generic" scheme="http://yoursite.com/tags/Generic/"/>
    
  </entry>
  
  <entry>
    <title>Demo01InnerClassThread</title>
    <link href="http://yoursite.com/2020/03/28/Demo01InnerClassThread/"/>
    <id>http://yoursite.com/2020/03/28/Demo01InnerClassThread/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.844Z</updated>
    
    <content type="html"><![CDATA[<p>InnerClassThread.Demo01InnerClassThread</p><a id="more"></a><p>package com.Thread.InnerClassThread;</p><p>/*<br>    匿名内部类方式实现线程的创建</p><pre><code>匿名：没有名字内部类：写在其他内部的类匿名内部类：简化代码    把子类继承父类，重写父类的方法。创建子类对象合一步完成    把实现类实现接口，重写接口中的方法，创建实现类对象合成一步完成匿名内部类的最终产物：子类/实现类对象，而这个类没有名字格式：    new 父类/接口() {        重写父类/接口中的方法    }</code></pre><p> */<br>public class Demo01InnerClassThread {<br>    public static void main(String[] args) {<br>        // 线程的父类是Thread<br>        new Thread() {<br>            @Override<br>            public void run() {<br>                for (int i = 0; i &lt; 20; i++) {<br>                    System.out.println(Thread.currentThread().getName() + “–&gt;” +i);<br>                }<br>            }<br>        }.start();</p><pre><code>    new Thread() {        @Override        public void run() {            for (int i = 20; i &lt; 40; i++) {                System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; +i);            }        }    }.start();    // 线程的接口Runnable    Runnable runnable = new Runnable() {        @Override        public void run() {            for (int i = 1000; i &lt; 1020; i++) {                System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + i);            }        }    };    new Thread(runnable).start();    // 简化接口的方式    new Thread(new Runnable() {        @Override        public void run() {            for (int i = 2000; i &lt; 2020; i++) {                System.out.println(Thread.currentThread().getName() + &quot;--&gt;&quot; + i);            }        }    }).start();}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;InnerClassThread.Demo01InnerClassThread&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="InnerClassThread" scheme="http://yoursite.com/tags/InnerClassThread/"/>
    
  </entry>
  
  <entry>
    <title>Demo01MainThread</title>
    <link href="http://yoursite.com/2020/03/28/Demo01MainThread/"/>
    <id>http://yoursite.com/2020/03/28/Demo01MainThread/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.836Z</updated>
    
    <content type="html"><![CDATA[<p>Thread.Demo01MainThread</p><a id="more"></a><p>package com.Thread;</p><p>/*<br>    主线程：执行主（main）方法的线程</p><pre><code>单线程程序：java程序中只有一个线程执行从main方法开始。从上到下依次执行</code></pre><p> */<br>public class Demo01MainThread {<br>    public static void main(String[] args) {<br>        Person p1 = new Person(“小强”);<br>        p1.run();</p><pre><code>    Person p2 = new Person(&quot;旺财&quot;);    p2.run();}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thread.Demo01MainThread&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Demo01List</title>
    <link href="http://yoursite.com/2020/03/28/Demo01List/"/>
    <id>http://yoursite.com/2020/03/28/Demo01List/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.815Z</updated>
    
    <content type="html"><![CDATA[<p>List.Demo01List</p><a id="more"></a><p>package com.List;</p><p>import java.util.ArrayList;<br>import java.util.Iterator;<br>import java.util.List;</p><p>/*<br>    java.util.List接口 extends Collection接口<br>    List接口的特点：<br>        1.有序的集合，存储元素和取出元素的顺序是一致的（存储123 取出123）<br>        2.有索引，包含了一些带索引的方法<br>        3.允许存储重复的元素</p><pre><code>List接口中带索引的方法（特有）：    public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上    public E get(int index): 返回集合中指定位置的元素    public E remove(int index): 移除列表中指定位置的元素，返回的是被移除的元素    public E set(int index, E element): 用指定元素替换集合中指定位置的元素，返回值是更新前的元素注意：    操作索引的时候，一定要防止索引越界    IndexOutOfBoundsException： 集合索引越界异常    ArrayIndexOutOfBoundsException： 数组索引越界异常    StringIndexOutOfBoundsException： 字符串索引越界异常</code></pre><p> */<br>public class Demo01List {<br>    public static void main(String[] args) {<br>        // 创建List集合对象，多态<br>        List<String> list = new ArrayList&lt;&gt;();<br>        // 使用add方法往集合中添加元素<br>        list.add(“a”);<br>        list.add(“b”);<br>        list.add(“c”);<br>        list.add(“d”);<br>        list.add(“a”);<br>        // 打印集合<br>        System.out.println(list); // [a, b, c, d, a]  不是地址值，则重写了toString</String></p><pre><code>    // public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上    // 在b和c之间添加abc    list.add(2,&quot;abc&quot;);    System.out.println(list);    // public E remove(int index): 移除列表中指定位置的元素，返回的是被移除的元素    String remove = list.remove(1);    System.out.println(list);    System.out.println(&quot;被移除的元素：&quot; + remove);    // public E set(int index, E element): 用指定元素替换集合中指定位置的元素，返回值是更新前的元素    // 将abc替换为ABC    String abc = list.set(1, &quot;ABC&quot;);    System.out.println(list);    System.out.println(&quot;被替换的元素：&quot; + abc);    // List集合遍历有3种方式    // 使用普通的for循环    for (int i = 0; i &lt; list.size(); i++) {        // public E get(int index): 返回集合中指定位置的元素        String s = list.get(i);        System.out.println(s);    }    // 使用迭代器    Iterator&lt;String&gt; iterator = list.iterator();    while (iterator.hasNext()) {        String next = iterator.next();        System.out.println(next);    }    // 增强for循环    for (String s : list) {        System.out.println(s);    }    String s = list.get(10);    System.out.println(s); // IndexOutOfBoundsException 越界异常}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;List.Demo01List&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="List" scheme="http://yoursite.com/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Demo01JDK9</title>
    <link href="http://yoursite.com/2020/03/28/Demo01JDK9/"/>
    <id>http://yoursite.com/2020/03/28/Demo01JDK9/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.813Z</updated>
    
    <content type="html"><![CDATA[<p>JDK9.Demo01JDK9</p><a id="more"></a><p>package com.JDK9;</p><p>import java.util.List;</p><p>/*<br>    JDK9的新特性：<br>        List接口，Set接口，Map接口：里面增加了一个静态的方法of，可以给集合一次性添加多个元素<br>        static <E> List<E> of (E…elements)<br>        使用前提：<br>            当集合中存储的元素个数已经确定，不在改变时<br>    注意：<br>        1.of方法只适用于List接口，Set接口，Map接口，不适用于接口的实现类<br>        2.of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，会抛出异常<br>        3.Set接口和Map接口在调用of方法的时候，不能有重复的元素，否则会抛出异常<br> */<br>public class Demo01JDK9 {<br>    public static void main(String[] args) {<br>        List<String> list = List.of(“a”, “b”, “v”, “a”, “s”);<br>        System.out.println(list); // [a, b, v, a, s]<br>//        list.add(“a”); // UnsupportedOperationException：不支持操作异常</String></E></E></p><pre><code>}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK9.Demo01JDK9&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="JDK9" scheme="http://yoursite.com/tags/JDK9/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Map</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Map/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Map/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.817Z</updated>
    
    <content type="html"><![CDATA[<p>Map.Demo01Map</p><a id="more"></a><p>package com.Map;</p><p>import java.util.HashMap;<br>import java.util.Map;</p><p>/*<br>    java.util.Map&lt;k,v&gt; 集合<br>    Map集合的特点：<br>        1.Map集合是一个双列集合，一个元素包含两个值(一个key,一个value)<br>        2.Map集合中的元素，key和value的数据类型可以相同，也可以不同<br>        3.Map集合中的元素，key是不允许重复的，value可以重复<br>        4.Map集合中的元素，key和value是一一对应的<br>    java.util.HashMap&lt;k,v&gt;集合 implements Map&lt;k,v&gt;接口<br>    HashMap集合的特点：<br>        1.HashMap集合底层是哈希表：查询的速度特别快<br>        2.HashMap集合是一个无序的集合，存储元素与取出的元素有可能不一致<br>    java.util.LinkedHashMap&lt;k,v&gt;集合 extends HashMap(k,v) 集合<br>    LinkedHAshMap的特点：<br>        1.LinkedHashMap集合底层是哈希表+链表（保证迭代的顺序）<br>        2.LinkedHashMap集合是一个有序的集合。存储元素和取出元素的顺序一致<br> */<br>public class Demo01Map {<br>    public static void main(String[] args) {<br>        show01();<br>        System.out.println(“=======================”);<br>        show02();<br>        System.out.println(“=======================”);<br>        show03();<br>        System.out.println(“=======================”);<br>        show04();<br>    }</p><pre><code>/*    boolean containsKey(Object key) 判断集合中是否包含指定的键    包含返回true，不包含返回false */private static void show04() {    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();    map.put(&quot;第一&quot;,1);    map.put(&quot;第二&quot;,2);    map.put(&quot;第三&quot;,3);    map.put(&quot;第四&quot;,4);    boolean get1 = map.containsKey(&quot;第一&quot;);    System.out.println(get1); // true    boolean get2 = map.containsKey(&quot;第五&quot;);    System.out.println(get2); // false}/*    public V get(Object key) 根据指定的键，在Map集合中获取对应的值    返回值：        key存在，返回对应的value值        key不存在，返回null */private static void show03() {    Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();    map.put(&quot;第一&quot;,1);    map.put(&quot;第二&quot;,2);    map.put(&quot;第三&quot;,3);    map.put(&quot;第四&quot;,4);    Integer get1 = map.get(&quot;第一&quot;);    System.out.println(get1); // 1    Integer get2 = map.get(&quot;第五&quot;);    System.out.println(get2); // null}/*    public V remove(Object key)：把指定的键所对应的键值对元素 在Map集合中删除。返回被删除元素的值 */private static void show02() {    // 创建Map集合对象，多态    Map&lt;String, String&gt; map = new HashMap&lt;&gt;();    String v1 = map.put(&quot;小米&quot;, &quot;小花&quot;);    System.out.println(v1); // null    String v2 = map.put(&quot;小米&quot;, &quot;小花花&quot;);    System.out.println(v2); // 小花    System.out.println(map); // {小米=小花花}    map.put(&quot;1&quot;, &quot;2&quot;);    map.put(&quot;3&quot;, &quot;2&quot;);    map.put(&quot;4&quot;, &quot;4&quot;);    System.out.println(map);    String remove = map.remove(&quot;1&quot;);    System.out.println(remove);    System.out.println(map);}/*    public v put(K key, V value)：把指定的键与指定的值添加到Map集合中去        返回值: v            存储键值对时，key不重复，返回值v是null            存储键值对时，key重复，会使用新的value替换map中重复的value，返回被替换的value值 */private static void show01() {    // 创建Map集合对象，多态    Map&lt;String, String&gt; map = new HashMap&lt;&gt;();    String v1 = map.put(&quot;小米&quot;, &quot;小花&quot;);    System.out.println(v1); // null    String v2 = map.put(&quot;小米&quot;, &quot;小花花&quot;);    System.out.println(v2); // 小花    System.out.println(map); // {小米=小花花}    map.put(&quot;1&quot;, &quot;2&quot;);    map.put(&quot;3&quot;, &quot;2&quot;);    map.put(&quot;4&quot;, &quot;4&quot;);    System.out.println(map);}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Map.Demo01Map&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Map" scheme="http://yoursite.com/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Demo01RegisterException</title>
    <link href="http://yoursite.com/2020/03/28/Demo01RegisterException/"/>
    <id>http://yoursite.com/2020/03/28/Demo01RegisterException/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.828Z</updated>
    
    <content type="html"><![CDATA[<p>MyException.Demo01RegisterException</p><a id="more"></a><p>package com.MyException;</p><p>import java.util.Scanner;</p><p>/*<br>    要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。<br>    分析：<br>        1.使用数组保存已经注册过的用户名（数据库）<br>        2.使用Scanner获取用户输入的注册的用户名（前端，页面）<br>        3.定义一个方法，对输入的注册的用户名进行判断<br>            遍历存储已经注册过用户名的数组，获取每一个用户名<br>            使用获取到的用户名和用户输入的用户名比较<br>                true:<br>                    用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册。”<br>                false:<br>                    继续遍历比较<br>                    如果循环结束了，还没有找到重复的用户名，提示用户“恭喜您，注册成功！”<br> */<br>public class Demo01RegisterException {<br>    // 1.使用数组保存已经注册过的用户名（数据库）<br>    static String[] usernames = {“张三”, “李四”, “王五”};</p><pre><code>public static void main(String[] args) /*throws RegisterException*/ {    // 2.使用Scanner获取用户输入的注册的用户名（前端，页面）    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;请输入您要注册的用户名：&quot;);    String username = scanner.next();    checkUsernames(username);}// 3.定义一个方法，对输入的注册的用户名进行判断public static void checkUsernames(String username) /*throws RegisterException*/ {    // 遍历存储已经注册过用户名的数组，获取每一个用户名    for (String name : usernames) {        // 使用获取到的用户名和用户输入的用户名比较        if (name.equals(username)) {            // true：用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册。”            try {                throw new RegisterException(&quot;亲，该用户名已经被注册。&quot;);            } catch (RegisterException e) {                e.printStackTrace();                return; // 结束方法            }        }    }    // 如果循环结束了，还没有找到重复的用户名，提示用户“恭喜您，注册成功！”    System.out.println(&quot;恭喜您，注册成功！&quot;);}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyException.Demo01RegisterException&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="MyException" scheme="http://yoursite.com/tags/MyException/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Runnable</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Runnable/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Runnable/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.863Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda.Demo01Runnable</p><a id="more"></a><p>package com.ThreadAndLambda.Lambda;</p><p>/*<br>    使用实现Runnable接口的方式实现多线程程序<br> */<br>public class Demo01Runnable {<br>    public static void main(String[] args) {<br>        // 创建Runnable接口的实现类对象<br>        RunnableImpl runnable = new RunnableImpl();<br>        // 创建Thread类对象，构造方法中传递Runnable接口的实现类<br>        Thread thread = new Thread(runnable);<br>        // 调用start方法开启新线程，执行run方法<br>        thread.run();</p><pre><code>    // 简化代码，使用匿名内部类，实现多线程    Runnable runnable1 = new Runnable(){        @Override        public void run() {            System.out.println(Thread.currentThread().getName() + &quot;新线程创建了&quot;);        }    };    new Thread(runnable1).start();    // 简化代码    new Thread(new Runnable() {        @Override        public void run() {            System.out.println(Thread.currentThread().getName() + &quot;新线程创建了&quot;);        }    }).start();}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda.Demo01Runnable&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Demo01Set</title>
    <link href="http://yoursite.com/2020/03/28/Demo01Set/"/>
    <id>http://yoursite.com/2020/03/28/Demo01Set/</id>
    <published>2020-03-28T02:35:40.000Z</published>
    <updated>2020-03-28T02:36:45.832Z</updated>
    
    <content type="html"><![CDATA[<p>Set.Demo01Set</p><a id="more"></a><p>package com.Set;</p><p>import java.util.HashSet;<br>import java.util.Iterator;<br>import java.util.Set;</p><p>/*<br>    java.util.Set接口 extends Collections接口<br>    Set接口的特点：<br>        1.不允许存储重复的元素<br>        2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历<br>    java.util.HashSet集合 implements Set接口<br>    HashSet特点：<br>        1.不允许存储重复元素<br>        2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历<br>        3.是一个无序的集合，存储元素和取出元素的顺序有可能不一致<br>        4.底层是一个哈希表结构（查询速度非常快）<br> */<br>public class Demo01Set {<br>    public static void main(String[] args) {<br>        Set<Integer> set = new HashSet&lt;&gt;();<br>        // 使用add方法往集合添加数据<br>        set.add(1);<br>        set.add(4);<br>        set.add(3);<br>        set.add(1);<br>        // 使用迭代器遍历set集合<br>        Iterator<Integer> iterator = set.iterator();<br>        while (iterator.hasNext()) {<br>            Integer next = iterator.next();<br>            System.out.println(next); // 1,3,4   不允许存储重复元素，无序<br>        }<br>        // 使用增强for遍历set集合<br>        System.out.println(“======================”);<br>        for (Integer i : set) {<br>            System.out.println(i); // 1,3,4    不允许存储重复元素，无序<br>        }</Integer></Integer></p><pre><code>}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Set.Demo01Set&lt;/p&gt;
    
    </summary>
    
    
      <category term="初学JAVA" scheme="http://yoursite.com/categories/%E5%88%9D%E5%AD%A6JAVA/"/>
    
    
      <category term="Set" scheme="http://yoursite.com/tags/Set/"/>
    
  </entry>
  
</feed>
